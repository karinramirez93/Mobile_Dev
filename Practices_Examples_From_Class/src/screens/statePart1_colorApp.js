import {useState} from 'react';
import {StyleSheet, View, Button} from 'react-native';

/**
* colorScreen is a functional component that demostrates how to manage a list of colors
* using state and display them on the screen.
* Note: currently, it generates a random background color for the main container and three
* fixed random color squares on every render, but the "add color!" is designed to eventually
* add new colors to a list
*/

//const ColorScreen() => {}  // same as below but using a different sintax notation
function ColorScreen(){

  /**
  * Declare a state variable 'colors' initialized as an empty array.
  * 'setColors' is the function used to update the state, triggering a re-render
  */
  const [colors, setColor] = useState([]);
    // Log the current state of the colors array to the console for debugging
    console.log(colors);

  //JSX block to define the component's layout and content
  let body =
    /**
    * the main container View. It uses array syntax to apply multiple styles
    * the second style object dynamically sets the background color using a helper function
    */
    <View style={[styles.mainContainer, {backgroundColor: produce_RGB_String() } ] }>
    
        {/* Button to trigger an action (adding a color to the 'colors' array)*/}
        <Button title= "Add a color"
                /**
                * onPress handler logic:
                * 1. calls setColors to update the state
                * 2. Uses the spread operator (...) to copy all existing 'colors' into a new array
                * 3. Appends a new random color string (generated by produce_RGB_String()) to the end of the new array
                * This process ensures immutability (state is never modified directly).
                */
                onPress= {() => {setcolor([..colors, produce_RGB_String() ] ) } }
        /> //end button component

        {/** Square VIew 1: this is just for demostrating purposes.
          * it uses the fixed 'colorFullSqure' style which has a default background color
          */}
        <View style={styles.colorFullSquare}/>

        {/** Square View 2, 3, 4: These demostrate overWritting styles.
          * the base style is 'colorFullSquare', but the second style object with a dynamic
          * 'backgroundColor' overrides the one defined in 'colorFullSquare'.
          * each square will have a different random color upon initial render
          */}
        <View style={[styles.colorFullSquare, {backgroundColor: produce_RGB_String() }]}/>
        <View style={[styles.colorFullSquare, {backgroundColor: produce_RGB_String() }]}/>
        <View style={[styles.colorFullSquare, {backgroundColor: produce_RGB_String() }]}/>
    </View>

// return the defined JSX body to the rendered
return(
    body
  );
}// end of colorScreen function


//----------------------------------------------------------
//      HELPER FUNCTIONS
//----------------------------------------------------------

/**
*Generates a random integer between 0 (inclusive) and maxValue (exclusive)
* @param {number} maxValue - the upper bound for the random number (e.g., 256 for 0-255).
* @returns {number} a random integer
*/
function getRandomInt(maxValue){
  //Math.random() returns a floar between 0 (inclusive) and 1 (exclusive)
  //Math.floor() rounds down to the nearest integer.
  return Math.floor(Math.random() * maxValue);
}
/**
* creates a CSS-valid RGB color string with random values for Red, Green, Blue.
* @returns {string} an RGB color string (e.g., "rgb(120, 50, 200)").
*/
function produce_RGB_String() {
  let redValue = getRandomInt(255);
  let greenValue = getRandomInt(255);
  let blueValue = getRandomInt(255);

  // Use string literal/template literal (backticks ``) for cleaner string concatenation
  // return "rgb(" + redValue + "," + greenValue + "," + blueValue + ")"; // alternative
  return `rgb(${redValue}, ${greenValue}, ${blueValue})`
}

//-------------------------------------------------------
//      STYLESHEET
//-------------------------------------------------------

//StyleSheet.create optimizes style creation and referencing
const styles=StyleSheet.create({
  //Style for the main container View
  mainContainer:{
    flex: 1, // takes up the entire available space on the screen
    backgroundColor: '#1dbda5ff', // Default background color
    alignItem: 'center', // centers children horizontally along the cross-axis
    justifyContent: 'center', // centers children vertically along the main-axis, which is column by default
  },
  //style for the color-filled square View
  colorFullSquare:{
    height: 100, // fixed height of 100 pixels
    width: 100, //fixed width of 100 pixels (making it a square)
    backgroundColor: "rgb(255,255,255)", // Default background color 
    marginVertical: 20, // adds 20 pixels of external space above and below the square
  },
});

export default colorScreen;
